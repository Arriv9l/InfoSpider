name: test

on:
  push:
    branches: [ test ]
  workflow_dispatch:
    inputs:
      url:
        description: 'URL to debug'
        required: true

jobs:
  Prerequisites:
    runs-on: ubuntu-latest
    # steps 之间传递数据可以通过 ${{ steps.step1.outputs.test }}
    # 而 jobs 之间传递则需要靠 ${{needs.job1.outputs.output1}}
    # 具体见 https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idoutputs
    outputs:
      paths: ${{ steps.get-paths.outputs.paths }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: setObj
        id: set-obj
        uses: actions/github-script@v3
        with:
          script: |
            const obj = [
              {folder: 'part1/1.1', targetFolder: 'part1/1.1/build'},
              {folder: 'part2/2.2', targetFolder: 'part2/2.2/build'},
              {folder: 'part3/3.3', targetFolder: 'part3/3.3/build'},
            ]
            // core.setOutput('obj', JSON.stringify(obj))
            core.setOutput('obj', obj)

      - name: getObj
        uses: actions/github-script@v3
        with:
          script: |
            const branch = core.getInput('previews')
            console.log(`branch: ${branch}`)

            let test = core.getInput('user-agent')
            console.log(`test-1: ${test}`)
            test = JSON.parse(test)
            console.log(`test-2: ${test}`)
            test.map(each => console.log(`${each.folder} ${each.targetFolder}`))
            
            let obj = core.getInput('obj')
            console.log(`obj-1: ${obj}`)
            obj = JSON.parse(obj)
            console.log(`obj-2: ${obj}`)
            obj.map(each => console.log(`${each.folder} ${each.targetFolder}`))
          previews: gh-pages
          user-agent: ${{ steps.set-obj.outputs.obj }}

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      # 本来根据 https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#push
      # 和 https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#object-filters
      # 在 PUSH 中可以通过 ${{ github.event.commits.*.added }} 来获取 added,modified,removed 文件
      # 但是根据 https://github.blog/changelog/2019-10-16-changes-in-github-actions-push-event-payload/
      # 这三个属性已经被删除了，所以只能用 https://docs.github.com/en/rest/reference/repos#compare-two-commits
      - name: Get Paths
        id: get-paths
        uses: actions/github-script@v3
        # https://github.com/actions/github-script#download-data-from-a-url
        # 用 github.request() 来下载，result.data 已解析为 JSON
        # 注意 match 的用法：(.match() || [])[0]
        # 用 indexOf() 实现数组去重
        # 用 fs.existsSync() 判断文件是否存在
        # 实测发现，可以直接用 require('fs')，但不能用 import，那是 TypeScript 的语法
        with:
          script: |
            const fs = require('fs')
            const url = '${{ github.event.inputs.url }}' || 'https://api.github.com/repos/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.event.after }}'
            const result = await github.request(url)
            const paths = result.data.files
              .map(x => (x['filename'].match(/part\d\/.+?(?=\/)/) || [])[0])
              .filter(Boolean)
              .filter((item, index, array) => array.indexOf(item) === index)
              .filter(x => fs.existsSync(x))
            core.setOutput('paths', paths)

      - name: Set Matrix
        id: set-matrix
        uses: actions/github-script@v3
        # 判断数组是否为空，用 '[]'，加不加 join() 都可以
        if: ${{ steps.get-paths.outputs.paths != '[]' }}
        with:
          script: |
            const matrix = {}
            matrix.path = ${{ steps.get-paths.outputs.paths }}
            core.setOutput('matrix', JSON.stringify(matrix))


  README:
    runs-on: ubuntu-latest
    needs: Prerequisites
    if: ${{ needs.Prerequisites.outputs.paths != '[]' }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # 自动创建所有缺失的 README
      - name: Add README 📝
        id: add-readme
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs')
            const paths = ${{ needs.Prerequisites.outputs.paths }}.filter(path => !fs.existsSync(`${path}/README.md`))
            const readmes = paths.map(path => {
              const readme = `${path}/README.md`
              const text = `# Preview\nhttps://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${path}`
              fs.writeFileSync(readme, text)
              return readme
            })
            core.setOutput('readmes', readmes)

      # https://github.com/marketplace/actions/add-commit
      # 如果 readmes 数组不为空，则自动发 commit
      # commit 中添加的文件为数组，就避免了一个文件一个 commit，有点刷绿墙的嫌疑
      # 实测发现自动发 commit 并不会再次触发 Actions，导致死循环
      - name: Auto Commit 📝
        uses: EndBug/add-and-commit@v7
        if: ${{ steps.add-readme.outputs.readmes != '[]' }}
        with:
          message: '📝 Auto Add README'
          add: ${{ steps.add-readme.outputs.readmes }}


  Deploy:
    runs-on: ubuntu-latest
    needs: Prerequisites
    if: ${{ needs.Prerequisites.outputs.paths != '[]' }}
    # 来自 https://github.community/t/check-pushed-file-changes-with-git-diff-tree-in-github-actions/17220/10
    strategy:
      matrix: ${{ fromJson(needs.Prerequisites.outputs.matrix) }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # https://github.com/actions/cache/blob/main/examples.md#node---yarn
      # 实测发现，加上缓存后，时间由 60s 缩短到了 30s
      # 但以后的话，最好在 PUSH 时加上 yarn.lock 文件
      # 不过不加的话应该也无所谓吧，有待测试
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # 实测发现
      # 不应该往 package.json 中添加 "homepage" : "part1/1.1"，这样会导致链接变为 https://arriv9l.github.io/part1/1.1/xxx，缺少了仓库名
      # 也不应该设置 PUBLIC_URL=REPO_NAME/part1/1.1，这样会导致链接变为 https://arriv9l.github.io/REPO_NAME/part1/1.1/REPO_NAME/part1/1.1/xxx，重复了 REPO_NAME/part1/1.1
      # 而应该设置 PUBLIC_URL=./，这样链接才能为正常格式的 https://arriv9l.github.io/REPO_NAME/part1/1.1/xxx
      # 设置环境变量的教程见 https://create-react-app.dev/docs/adding-custom-environment-variables/#adding-temporary-environment-variables-in-your-shell
      - name: Install and Build 🔧
        run: |
          cd ${{ matrix.path }}
          yarn
          PUBLIC_URL=./ yarn build

      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@4.0.0
        with:
          branch: gh-pages
          folder: ${{ matrix.path }}/build
          target-folder: ${{ matrix.path }}
          clean: false